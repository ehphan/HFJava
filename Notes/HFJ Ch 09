Ch 9 Notes

The Stack and the Heap
2 areas of memory
-objects live in the heap
-method invokes and local vars live in the stack

Objects live on the garbage-collectible heap

A variable life depends on what kind of var it is
	- by kind we don't mean type (primitive or object) the 2 inds of variables whose lives we caer about are instance variables IVs and local variables LVs
	- LVs are also known as stack variables

The Stack (where method invocations and LVs live)
- go()
- doStuff()
- main()

The Heap (where all objects live)
- Duck object
- Snowboard object

Instance Variables
	IVs are declared inside a class but not inside a method. They represent the "fields" that each individual object has (which can be filled with different values for each instanc of the class), IVs live inside the object they belong to.

	public class Duck {
		int size; // every Duck has a"size" IV
	}

Local Variables LVs
	LVs are declared inside a method, including method parameters. They're temporary and live only as long as the method is on the stack (in other words, as long as the method has not reached the closing curly brace)

	public void foo (int x) {
	int i = x + 3;
	boolean b = true; // the parameter x and the variables i and b are LVs
	}

Methods are stacked
	When you call a method, the method lands on the top of a call stack. The new thing that's actually pushed onto the stack is the stack frame, and it holds the state of the method including which line of code is executing, and the values of all local variables.

	The method at the top is always currently running method for that stack, later we'll add more stacks. A method stays on the stack until the method hits its closing curly brace(which means its done).

What about LVs that are objects?
	A non-primitive variable holds a reference to an object, not the obj itself. If the LV is a reference to an object, only the var goes on the stack.
	No matter where the object refvar is declared, the object always always always goes on the heap.

/////////////////
//BULLET POINTS//
/////////////////
- Java has two areas of memory we care about: the Stack and the Heap.
- IVs are variables declared INSIDE a class, but OUTSIDE any method.
- LVs are variables declared inside a method, or method parameter.
- All LVs live on the stack, in the frame corresponding to the method where the variables are declared.
- Object refvars work just like primitive variables- if the reference is declared as a LV, it goes on the stack.
- All objects live in the heap, regardless of whether the reference is a local or or instance variable.

If LVs live on the stack, where do IVs live?
	IVs live on the Heap, inside the object they belong to
	If the IV is declared but no object is assigned to it, then only the space for the refvar is created

Creating an object
	1. Declare a reference variable ex Duck myDuck
	2. Create an object ex new Duck();
	3. Link the obj and ref Duck myDuck = new Duck();

Are we calling a method named Duck?
	You may think because of the parentheses we are calling a Duck method, but we're calling the Duck constructor.
	A constructor has the code that runs when you isntantiate an object. In other words, the code that runs when you say new on a class type. Every class you create has a constructor even if you don't write it yourself.

Construct a Duck
	The key feature of a constructor is that it runs before the object can be assigned to a reference. That means you get a chance to step in and do things to get the object ready for use. In other words, before anyone can use the remote control for an object, the object has a chance to help construct itself. In our Duck constructor, we're not doing anything useful, but it still demonstrates the sequence of events.

public class Duck {
	public Duck() {	//constructor code. The constructor givse you a chance to step into the middle of new
		System.out.println("AQuack"); 
	}
}

public class UseADuck {
	public static void main (String[] args) {
		Duck d = new Duck(); // this calls the Duck constructor
	}
}

A constructor lets you jump into the middle of the object creation step- into the middle of new.

Initializing the state of a new Duck
	Most people use constructors to initialize the state of an object. In other words, to make and assign values to the object's instance variables.

	public Duck() {
		size = 34;
	}

	public class Duck {
		int size;

		public Duck() {
			System.out.println("Quack");
		}

		public void setSize(int newSize) {
			size = newSize;
		}
	}

	public class UseADuck {
		public static void main (String[] args) {
			Duck d = new Duck();
			d.setSize(42); // NONO, the duck is alive at new Duck, but doesn't have size until setSize.
		}
	}

Using the constructor to initialize the important Duck state
	If an object shouldn't be used until one or more parts of its state have been initialized, don't let anyone get ahold of a Duck object until you're finished initializing.
	The best place top ut initialization code is in the constructor. And all you need to do is make a constructor with arguments.

	public class Duck {
		int size;

		public Duck (int duckSize) {	//add an int parameter to constructor
			System.out.println("Quack");

			size = duckSize;	//use teh argument value to set the size IV

			System.out.println("size is " +size);
		}
	}

	public class UseADuck {
		public static void main (String[] args) {
			Duck d = new Duck(42); //pass a value to the constructor
		}
	}

Does the compiler always make a no argument constructor for you? No
	You might think that if you write only a constructor with args, the compiler will see that you don't have a noarg constructor, and stick one in for you. but that's not how it works. the compiler gets involved with constructor making only if you don't  say anything at all about constructors.

If you write constructor that takes arguments, and you still want a no-arg constructor, you'll have to build the no arg constructor yourself.

If you have more than one constructor in a class, the constructors must have different argument lists

/////////////////
//BULLET POINTS//
/////////////////
- IVs live within the object they belong to, on the Heap
- If the IV is a reference to an object, both the ref and the obj it refers to are on the Heap.
- A constructor is the code that runs when you say new on a class type.
- A constructor must have the same name as the class, and must not have a return type.
- You can use a constructor to initialize the state of the object being constructed.
- If you don't put a constructor in your class, the compiler will put in a default constructor.
- The default constructor is always a no-arg constructor.
- If you put a constructor-any constructor-in your class, the compiler will not build the default constructor.
- If you want a no-arg constructor, and you've already put in a constructor with arguments, you'll have to build the no-arg constructor yourself.
- Always provide a no-arg constructor if you can, to make it easy for programmers to make a working object. Supply default values.
- Overloaded constructors mean you have more than one constructor in your class.
- Overloaded constructors must have different argument lists
.- You cannot have two constructors with the same argument lists. An argument list includes the order and/or the type of arguments.
- IVs are asigned a default value, even when you don't explicitly assign one. The default values are 0/0.0/false for primitives, and null for references.

Invoking one overloaded constructor from another
	You can say this() only within a constructor, and it must be the first staetement in the constructor.
	Every constructor can have a call to super() or this() but never both.
	Use this() to call a constructor from another overloaded constructor in the same class.
	The call to this() can be used only in a constructor, and must be the first statement in a constructor.
	A constructor can have a call to super() or this() never both.

class Mini extends Car {
	
	Color color;

	public Mini() {			//the noarg constructor supplies a default Color and calls the overloaded Real
		this.(Color.Red);	//Constructor (the one that calls super()).
	}

	public Mini (Color c) {
		super("Mini");	//This is the real constructor that does the real work of init the object
		color = c;		//including the call to super
	}

	public Mini(int size) {
		this(Color.Red);	//Won't work. You can't have super() and this() in the same constructor
		super(size);		//they each must be in the first statement
	}
}

Object killer 1
Reference goes out of scope, permanently

public class StackRef {
	public void foof() {
	barf();
	}

	public void barf() {
		Duck d = new Duck();
	}
}

1. foof() is pushed onto the stack with no variables declared
2. barf() is pushed onto teh stack, where it declares a refvar, and creates a new object assigned to that ref. the obj is creaetd on teh heap, and the ref is alive and in scope.
3. barf() completes and pops off the stack. its frame disintegraets so now d is dead and gone. execution returns to foof, but foof can't use d, so it will be collected.

Object killer 2
Assign the reference to another object

public class ReRef {
	Duck d = new Duck();

	public void go() {
		d = new Duck();
	}
}

Object killer 3
Explicitly set the reference to null

public class ReRef {
	Duck d = new Duck();

	public void go() {
		d = null;
	}
}

The meaning of null
When you set a reference to null, you're deprogramming the remote control.
You cannot use the dot operator on a null reference. befcause the jvm knows that you're expecting a bark but there's no dog to do it.
If you use the dot operator on a null reference, you'll get a NullPointerException at runtime

IVs
//////
- supports an object, keeps an objects state
- Lives on the Heap, inside of objects
LVs
//////
- known as temporary variables ( local, stack, automatic)