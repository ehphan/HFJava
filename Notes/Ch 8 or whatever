Animal simulation program
1. Look for objects taht have common attributes and behaviors.
2. Design a class that represents the common state and behavior.
3. Decide if a subclass needs behaviors(method implementations) that are specific to that particular subclass type.
4. Look for more opportunities to use abstraction, by finding two or more subclasses that might need common behavior.
	Feline: Lion/Tiger/Cat
	Hippo
	Canine: Dog/Wolf
5. Finish the class heirarchy.






Animal
	picture
	food
	hunger
	boundaries
	location
		makeNoise() //we better override these methods eat/makeNoise because each animal has separate behaviors.
		eat()
		sleep()
		roam()


IS-A and HAS-A
When one calss inherits from another, we say that the subcalss EXTENDS the superclass. When checking extensions apply the is-a test.
triangle is a shape
cat is-a feline
surgeon is-a doctor

however something like tub extends bathroom sounds good until is-a.
tub is-a bathroom is no good, but there is a relation, but NOT through inheritance.
Bathroom HAS-A tub, that means bathroom has a tub IV

Bathroom 				Tub 				Bubbles
	Tub bathtub				int size;			int radius
	Sink theSink			bubbles b;			int coloramt


the IS-A test works anywhere in the inheritance tree

A superclass can choose whether or not it wants a subclass to inherit a particular member by the level of access.
private	default	protected	public

Access levels control who sees what, and are crucial for well designed code. for now we'll focus on public and private.
public members are inherited.
private members are not inherited.

- A subclass extends a superclass
- A subclass inherits all public IV's and methods of the superclass, but does not inherit the private IV's and methods of the superclass
- Inherited methods can be overridden; IV's cannot be overridden (although they can be redefined in the subclass, but that's not the same thing, and there's almost never a need to do it.)
- Use the isa test to verify that your inheritance hierarchy is valid. if X extends Y, then X is a Y must make sense.
- when a method is overridden in a subclass, and that method is invoked on an instance of the subclass, the overridden version of the method is called. Lowest one wins.
- if class B ext A and C ext B.class B isa A, class C isa B and class C isa A.

What does inheritance really buy you?
1. You avoid duplicate code.
2. You define a common protocol for a group of classes.

Polymorphism
Usually you do
Dog myDog = new Dog();
which gives you a reference type Dog and an object of Dog
but with polymorphism, the reference and the object can be different
Animal myDog = new Dog();
With polymorphism, the reference type can be a superclass of the actual object type.

example.
Animal[] animals = new Animal[5];
animals[0] = new Dog();
animals[1] = new Cat();
animals[2] = new Wolf();
animals[3] = new Hippo();
animals[4] = new Lion();
With this you can put any subclass of animal in the array.

You can have polymorphic arguments and return types.

class Vet {
	public void giveShot(Animal a) {
	//give them the shot
	a.makeNoise();
	}
}
the Animal parameter can take ANY Animal type as the argument. And when the Vet is done giving the shot, it tells the Animal to makeNoise()

class PetOwner {
	public void start() {
		Vet v = new Vet();
		Dog d = new Dog();
		Hippo h = new Hippo();
		v.giveShot(d);
		v.giveShot(h);
	}
}

Keeping the contract: rules for overriding
1. Arguments must be the same, and return types must be compatible.
2. The method can't be less accessible.
	The access level must be the same or friendlier. you can't super public to sub private.

Overloading a method
//
Method overloading is nothing more than having two methods with the same name but different argument lists. Period. There's no polymorphism involved with overloaded methods!

1. The return types can be different
2. You can't change ONLY the return type
3. You can vary the access levels in any direction.
	private/public don't matter, the new method isn't obligated to fulfill the contract of the overloaded method.

Ch 8
//

An Abstract class has virtually no use, no value, no purpose, unles it is extended

Abstract vs Concrete.
A class that's not abstract is called a concrete class.

Abstract methods
Besides classes, you can mark methods abstract too. An abstract class means the class must be extended; an abstract method means the method must be overridden. An abstract method has no body.
	public abstract void eat();

Every class in Java extends class Object.
Any class that doesn't explicitly extend another class, implicitly extends Object.

Class Object has some basic functions.
1. boolean equals()
	Dog a = new Dog();
	Cat c = new Cat();

	if (a.equals(c)) {
		System.out.println("true");
	} else {
		System.out.println("false");
	}

2. Class getClass()
	Cat c = new Cat();
	System.out.println(c.getClass());
	//Gives you back the class taht object was instantiated from
	//class Cat

3. int hashCode()
	Cat c = new Cat();
	System.out.println(c.hashCode());
	//prints out hashcode for the object, think of it as a unique ID
4. String toString()
	Cat c = new Cat();
	System.out.println(c.toString());
	//Cat@7d277f

ArrayList<Dog> myDogArrayList = new ArrayList<Dog>(); // Make an arraylist declared to hold dog obj
Dog aDog = new Dog(); // make dog
myDogArrayList.add(aDog);  // add the dog to the list
Dog d = myDogArrayList.get(0); // Assign the dog from the list to a new dog reference variable
		//thik of it as though the get() method decalres a Dog return type because you used arraylist dog

ArrayList<Object> myDogArrayList = new ArrayList<Object>();
Dog aDog = new Dog();
myDogArrayList.add(aDog);
// Dog d = myDogArrayList.get(0);
this shit won't compile now, because when you use arraylist object, the get method returns type object, not Dog.

The problem with having everything treated polymorphically as an object is that the objects appear to lose their true essence.

PROGRAMMO NONO
public void go() {
	Dog aDog = new Dog();
	Dog sameDog = getObject(aDog); // this line won't work. even if method returned the same Dog, it is returned as Object
}
public Object getObject(Object o ) {
	return o;
}

THE RIGHT WAY
public void go() {
	Dog aDog = new Dog();
	Object sameDog = getObject(aDog); // this works because you can assign anything to a reference of type object
}

public Object getObject(Object o) {
	return o;
}

The compiler decides whether you can call a method based on the !!reference type, not the actual object type.

When you put an object in an ArrayList<Object>, you can treat it only as an Object, regardless of the type it was when you put it in.

When you get a reference from an ArrayList<Object>, the reference is always of type Object.

That means you get an Object remote control.

Casting an object reference back to its real type.
If you're sure* the object is really a Dog, you can make a new Dog refernce to it by copying the Object reference, and then forcing that copy to go into a Dog reference variable, using a cast (Dog). You can use the new Dog reference to call Dog methods.

Object o = al.get(index);
Dog d = (Dog) o; // cast the Object back to a Dog we know is there.
d.roam();

If you're not sure it's a Dog, you can use the instaceof operator to check. Because if you're wrong when you do the cast, you'll get a ClassCastException at runtime and come to a grinding halt.
	if (o instanceof Dog) {
		Dog d = (Dog) o;
	}

So now you've seen how much Java cares about the methods in the class of the reference variable.

You can call a method on an object only if the class of the reference variable has that method.
Think of the public methods in your class as your contract, your promise to the outside world about the things you can do.

The compiler checks the class of the reference variable, not the class of the actual object at the other end of the reference.

PetShop Program

1. We take the easy path, and put pet methods in class Animal.

2. We start with Option One, putting the pet methods in class Animal, but we make the methods abstract, forcing the Animal subclasses to override them.

3. Put the pet methods ONLY in the classes where they belong.

What we really need is
- a way to have pet behavior in just the pet classes
- a way to guarantee that all pet classes have all of the same methods defined(same name, same args, same return types, no missing methods, etc.) without having to cross your fingers and hope all the programmers get it right.
- a way to take advantage of polymorphism so that all pets can have their pet methods called, without having to use arguments, return types, and arrays for each and every pet class.

It looks like we need TWO superclasses at the top

we make a new abstract superclass called Pet, and give it all the pet methods.
cat/dog now extends from both animal and pet

There's just one problem with teh two superclasses approach.
It's called "Multiple Inheritance" and it can be a really bad thing.
Known as the Deadly Diamond of Death (fig 2.)

Java gives you a solution. an Interface, not usual interface but keyword interface.
A Java interface solves your multiple inheritance problems by giving you much of the polymorphic benefits of multiple inheritance without the pain and suffering from teh Deadly Diamond of Death(DDD).

How we avoid DDD is simple. make all the methods abstract. that way the subclass must implement the methods(remember, abstract methods must be implemented by the first concrete subclass), so at runtime the JVM isn't confused about which of the two inherited versions it's supposed to call.

Class Pet 		//A java interface is like a 100% pure abstract class
//				// All methods in an interface are abstract, so any class that is-a pet must implement the methods of pet
abstract void beFriendly();
abstract void play();

To DEFINE an interface:
	public interface Pet{...} //use keyword interface instead of class

To IMPLEMENT an interface:
	public class Dog extends Canine implements Pet {...}

Making an Imlpementing the Pet interface

	public interface Pet {
		public abstract void beFriendly();	//all interface methods are abstract, they MUST end in semicolons. no body.
		public abstract void play();
	}

	public class Dog extends Canine implements Pet {
		public void beFriendly() {...}
		public void play() {...}

		public void roam() {...}
		public void eat() {...}
	}

Classes from different inheritance trees can implement the same interface.

How do you know whether to make a class, subclass, abstract class, or an interface?
- Make a class that doesn't extend anything when your new class doesn't pass the is-a test for any other type.
- Make a subclass (extend) only when you need to make a more specific version of a class and need to override or add new behaviors.
- Use an abstract class when you want to define a TEMPLATE for a group of subclasses, and you have at least some implementation code that all subclasses could youse. Make the class abstract when you want to guarantee that nobody can make objects of that type.
- Use an interface when you want to define a role that other classes can play, regardless of where those classes are in the inheritance tree.

Bullet Points:
- When you don't want a class to be instantiated, mark the class with the abstract keyword.
- an abstract class can have both abstract and non-abstract methods.
- An abstract method has no body, and the declaration ends wih a semicolon ( no curlies)
- All abstract methods must be implemented in the first concrete subclass in the inheritance tree.
- Methods can be decalred with Object arguments and/or return types
- You can call methods on an object ONLY if the methods are in the class (or interface) used as the reference variable type, regardless of the actual object type. So, a reference variable of type Object can be used only to call methods defined in clas Object, regardless of the type of object to which the reference refers.
- A ref variable of type Object can't be assigned to any other ref type without a cast. A cast can be used to assign a refvar of one type to a refvar of a subtype, but at runtime teh cast will fail if the object on the heap is NOT of a type compatible with the cast. EX: Dog d = (Dog)x.getObject(aDog);
- All objects come out of an ArrayList<Object> as type Object.
- Multiple inheritance is not allowed in java. DEATH DIAMOND.
- An interface is a 100% pure abstract class. It defines only abstract methods.
- Create an interface using the interface keyword instead of word class.
- implement an interface using keyword implements EX: Dog implements Pet
- your class can implement mulitple interfaces.
- A class that implements an interface must implement all of the methods of the interface, since all interface methods are implicitly public and abstract.

