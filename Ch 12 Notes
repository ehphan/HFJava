Ch 12 Notes

Getting gui

It all starts with a window
	A JFrame is the object that represents a window on the screen. It's where you put all the interface things like buttons, checkboxes, text fields, and so on. 

Put widgets in the window
	Once you have a JFrame, you can put things ('widgets') in it by adding them to the JFrame. There are a ton of Swing components you can add; look for them in the javax.swing package. The most common include
		JButton
		JRadioButton
		JCheckBox
		JLabel
		JList
		JScrollPane
		JSlider
		JTextArea
		JTextField
		JTable

Making a GUI is easy:
	1. Make a frame (a JFrame)
		JFrame frame = new JFrame();
	2. Make a widget (button, text field, etc.)
		JButton button = new JButton ("click me");
	3. Add the widget to the frame
		frame.getContentPane().add(button);
		//You don't add things to the frame directly. Think of the frame as the trim around the window, and you add things to the window pane.
	4. Display it (give it a size and make it visible)
		frame.setSize(300,300);
		frame.setVisible(true);

Nothing happens when we click the button.
	we need two things:
	1. A method to be called when the user clicks(the thing you want to happen as a result of the click)
	2. A way to know when to trigger that method. In other words, a way to know when the user clicks thebutton

Getting a user event
	Imagine you want the text on the button to change from click me to i've been clicked when the user presses the button. First we can write a method that changes the text of the button.

	public void changeIt() {
		button.setText("I've been clicked");
	}

	In Java, the process of getting and handling a user event is called event-handling. There are many different event types in Jave, although most involve GUI user actions. If the user clicks a button, that's an event. 

	First, the button needs to know that we care.
	Second, the button needs a way to call us back when a button-clicked even occurs.

If you care about the button's events, IMPLEMENTING AN INTERFACE that says "I'm LISTENING for your events."
A listener interface is the bridge between the listener(you) and event source (button)

	The Swing GUI components are event sources. In Java terms, an event source is an object that can turn user actions (click, stroke,close) into events. And like virtually everything else in Java, an event is represented as an object. An object of some event class. If you scan through the java.awt.evetn package in the API, you'll see a bunch of event classes. You'll find MouseEvent, KeyEvent, WindowEvent etc.

	An event source (like a button) creates an event object when the user does something that matters (clicks a button). Most of the code you write (and all the code in this book) will receive events rather than create events. In other words, you'll spend most of your time as an event listener rather than an event source.

	Every event type has a matching listener interface. If you want MouseEvents, implement the MouseListener interface. And remember your interface rules- to implement an interface you declare that you implement it (class Dog implements Pet), which means you must write implementation methods for every method in the interface.

	Some interfaces have more than one method because the event itself comes in different flavors. If you implement MouseListener, for example, you can get events for mousePressed, mouseReleased, mouseMoved, etc. Each of those mouse events has a separate method in the interface, even though they all take a MouseEvent. If you implement MouseListener, the mousePressed() method is called when the user presses the mouse. And when the user lets go, the mouseReleased() method is called. So for mouse events, there's only one event object, MouseEvent, but several different event methods, representing the different types of mouse events.

	When you implement a listener interface, you give the button a way to call you back. The interface is where the call-back method is declared.

How the listener and source communicate:
	The Listener:
		If your class wants to know about a button's ActionEvents, you implement the ActionListener interface. The button needs to know you're interested, so you register with the button by calling its addActionListener(this) and passing an ActionListener reference to it ( in this case, you are the ActionListener so you pass this). The button needs a way to call you back when the event happens, so it calls the method in the listener interface. As an ActionListener, you must implement the interface's sole method, actionPerformed(). The compiler guarantees it.

	The Event Source:
		A button is a source of ActionEvents, so it has to know which objects are interested listeners. The button has an addActionListener() method to give interested objects(listeners) a way to tell the button they're interested.
		When the button's addActionListener() runs (because a potential listener invoked it), the button takes the parameter (a reference to the listener object) and stores it in a list. When teh user clicks the button, the button 'fires' the event by calling the actionPerformed() method on each listener in the list.

Getting a button's ActionEvent
	1. Implement the ActionListener interface
	2. Register with the button (tell it you want to listen for events)
	3. Define the event-handling method (implement the actionPerformed() method from the ActionListener interface)

import javax.swing.*;
import java.awt.event.*;	//new import statement for the package that ActionListener and ActionEvent are in

public class SimpleGui1B implements ActionListener {
// Implement the interface. This says "An instance of SimpleGui1B IS-A ActionListener"(The button will give events only to ActionListener implementers)
	JButton button;

	public static void main (String[] args) {
		SimpleGui1B gui = new SimpleGui1B();
		gui.go();
	}

	public void go() {
		JFrame frame = new JFrame();
		button = new JButton("click me");

		button.addActionListener(this);
//register your interest with the button. This says to the button"Add me to your list of listeners". The argument you pass MUST be an object from a class that implements ActionListener.

		frame.getContentPane().add(button);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(300,300);
		frame.setVisible(true);
	}

	public void actionPerformed(ActionEvent event) {
//Implement the ActionListener interface's actionPerformed() method. this is the actual event-handling method
		button.setText("I've been clicked");
	}
}
//The button calls this method to let you know an event happened. It sends you an ActionEvent object as the argument, but we don't need it. Knowing the event happened is enough info for us.

Listeners, Sources, and Events
	Listener GETS the event (A listeners job is to implement the interface, register with the button, and provide the event-handling.)

	Source SENDS the event (Accepts registrations from listeners, get events from the user, and call the listener's event-handling method)

	Event Object HOLDS DATA about the event(Is the argument to the event call-back method(from the interface) It's job is to carry data about the event back to the listener.)

