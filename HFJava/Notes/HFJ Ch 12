Ch 12 Notes

Getting gui

It all starts with a window
	A JFrame is the object that represents a window on the screen. It's where you put all the interface things like buttons, checkboxes, text fields, and so on. 

Put widgets in the window
	Once you have a JFrame, you can put things ('widgets') in it by adding them to the JFrame. There are a ton of Swing components you can add; look for them in the javax.swing package. The most common include
		JButton
		JRadioButton
		JCheckBox
		JLabel
		JList
		JScrollPane
		JSlider
		JTextArea
		JTextField
		JTable

Making a GUI is easy:
	1. Make a frame (a JFrame)
		JFrame frame = new JFrame();
	2. Make a widget (button, text field, etc.)
		JButton button = new JButton ("click me");
	3. Add the widget to the frame
		frame.getContentPane().add(button);
		//You don't add things to the frame directly. Think of the frame as the trim around the window, and you add things to the window pane.
	4. Display it (give it a size and make it visible)
		frame.setSize(300,300);
		frame.setVisible(true);

Nothing happens when we click the button.
	we need two things:
	1. A method to be called when the user clicks(the thing you want to happen as a result of the click)
	2. A way to know when to trigger that method. In other words, a way to know when the user clicks thebutton

Getting a user event
	Imagine you want the text on the button to change from click me to i've been clicked when the user presses the button. First we can write a method that changes the text of the button.

	public void changeIt() {
		button.setText("I've been clicked");
	}

	In Java, the process of getting and handling a user event is called event-handling. There are many different event types in Jave, although most involve GUI user actions. If the user clicks a button, that's an event. 

	First, the button needs to know that we care.
	Second, the button needs a way to call us back when a button-clicked even occurs.

If you care about the button's events, IMPLEMENTING AN INTERFACE that says "I'm LISTENING for your events."
A listener interface is the bridge between the listener(you) and event source (button)

	The Swing GUI components are event sources. In Java terms, an event source is an object that can turn user actions (click, stroke,close) into events. And like virtually everything else in Java, an event is represented as an object. An object of some event class. If you scan through the java.awt.evetn package in the API, you'll see a bunch of event classes. You'll find MouseEvent, KeyEvent, WindowEvent etc.

	An event source (like a button) creates an event object when the user does something that matters (clicks a button). Most of the code you write (and all the code in this book) will receive events rather than create events. In other words, you'll spend most of your time as an event listener rather than an event source.

	Every event type has a matching listener interface. If you want MouseEvents, implement the MouseListener interface. And remember your interface rules- to implement an interface you declare that you implement it (class Dog implements Pet), which means you must write implementation methods for every method in the interface.

	Some interfaces have more than one method because the event itself comes in different flavors. If you implement MouseListener, for example, you can get events for mousePressed, mouseReleased, mouseMoved, etc. Each of those mouse events has a separate method in the interface, even though they all take a MouseEvent. If you implement MouseListener, the mousePressed() method is called when the user presses the mouse. And when the user lets go, the mouseReleased() method is called. So for mouse events, there's only one event object, MouseEvent, but several different event methods, representing the different types of mouse events.

	When you implement a listener interface, you give the button a way to call you back. The interface is where the call-back method is declared.

How the listener and source communicate:
	The Listener:
		If your class wants to know about a button's ActionEvents, you implement the ActionListener interface. The button needs to know you're interested, so you register with the button by calling its addActionListener(this) and passing an ActionListener reference to it ( in this case, you are the ActionListener so you pass this). The button needs a way to call you back when the event happens, so it calls the method in the listener interface. As an ActionListener, you must implement the interface's sole method, actionPerformed(). The compiler guarantees it.

	The Event Source:
		A button is a source of ActionEvents, so it has to know which objects are interested listeners. The button has an addActionListener() method to give interested objects(listeners) a way to tell the button they're interested.
		When the button's addActionListener() runs (because a potential listener invoked it), the button takes the parameter (a reference to the listener object) and stores it in a list. When teh user clicks the button, the button 'fires' the event by calling the actionPerformed() method on each listener in the list.

Getting a button's ActionEvent
	1. Implement the ActionListener interface
	2. Register with the button (tell it you want to listen for events)
	3. Define the event-handling method (implement the actionPerformed() method from the ActionListener interface)

import javax.swing.*;
import java.awt.event.*;	//new import statement for the package that ActionListener and ActionEvent are in

public class SimpleGui1B implements ActionListener {
// Implement the interface. This says "An instance of SimpleGui1B IS-A ActionListener"(The button will give events only to ActionListener implementers)
	JButton button;

	public static void main (String[] args) {
		SimpleGui1B gui = new SimpleGui1B();
		gui.go();
	}

	public void go() {
		JFrame frame = new JFrame();
		button = new JButton("click me");

		button.addActionListener(this);
//register your interest with the button. This says to the button"Add me to your list of listeners". The argument you pass MUST be an object from a class that implements ActionListener.

		frame.getContentPane().add(button);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(300,300);
		frame.setVisible(true);
	}

	public void actionPerformed(ActionEvent event) {
//Implement the ActionListener interface's actionPerformed() method. this is the actual event-handling method
		button.setText("I've been clicked");
	}
}
//The button calls this method to let you know an event happened. It sends you an ActionEvent object as the argument, but we don't need it. Knowing the event happened is enough info for us.

Listeners, Sources, and Events
	Listener GETS the event (A listeners job is to implement the interface, register with the button, and provide the event-handling.)

	Source SENDS the event (Accepts registrations from listeners, get events from the user, and call the listener's event-handling method)

	Event Object HOLDS DATA about the event(Is the argument to the event call-back method(from the interface) It's job is to carry data about the event back to the listener.)

How do you know if an object is an event source?
    Look in the API, a method that starts with add, ends with Listener, and takes a listener interfac argument. If you see addKeyListener(KeyListener k) you know htat class with this method is a source of KeyEvents.
    
Getting back to graphics. 3 ways to put things on your GUI:
    1. Put widgets on a frame.
        Add buttons, menus, radio buttons ,etc.
        frame.getContentPane().add(myButton);
        the javax.swing package has more than a dozen widget types
    2. Draw 2D graphics on a widget.
        Use a graphics object to paint shapes.
        graphics.fillOval(70,70,100,100);
        You can paint a lot more than boxes and circles; the Java2D API is full of fun shit.
    3. Put a JPEG on a widget.
        You can put your own images on a widget.
        graphics.drawImage(myPic,10,10,this);
        
Make your own drawing widget.
    If you want to put your own graphics on the screen, your best bet is to make your own paintable widget. You plop that widget on the frame, just like a button or any other widget, but when it shows up it will have your images on it. You can even make those images move, in an animation, or make the colors on the screen change every time you click a button.
    Make a subclass of JPanel and override one method, paintComponent().
    All of your graphics code goes inside the paintComponent() method. Think of the paintComponent() method as the method called by the system to say, "Hey widget, time to paint yourself." If you want to draw a circle, the paintComponent() method will have code for drawing a circle. When the frame holding your drawing panel is displayed, paintComponent() is called nad your circle appears. If the user iconifies/minimizes th window, the JVM knows the frame needs"repair" when it gets de-iconified, so it calls paintComponent() again. Anytime the JVM thinks the display needs refreshing, your paintComponent() method will be called.
    One more thing, you never call this method yourself. The argument to this method(a graphics object) is the actual drawing canvas that gets slapped onto the real display. You can't get this by yourself; it must be handed to you by the system. You'll see later, however, that you can ask the system to refresh the display (repaint()), which ultimately leads to paintComponent() being called.
    
import java.awt.*;
import javax.swing.*;

class MyDrawPanel extends JPanel {
//Make a subclass of JPanel, a widget that you can add to a frame just like anything else. Except this one is your own customized widget.
    public void paintComponent (Graphics g) {
//This is be Big Important Graphics method. You will NEVER call this yourself. The system calls it and says, "Here's a nice fresh drawing surface, of type Graphics, that you may paint on now."
        g.setColor(Color.orange);
//Imagine that g is a painting machine. You're telling it what color to paint with and then what shape to paint with.
        g.fillRect(20,50,100,100);
    }
}

Fun things to do in paintComponent()
Display a JPEG
    public void paintComponent(Graphics g) {
        Image image = new ImageIcon("catzilla.jpg").getImage(); //filename goes here
        g.drawImage(image,3,4,this);
}

Paint a randomly-colored circle on a black background
	
public void paintComponent(Graphics g) {
	g.fillRect(0,0,this.getWidth(), this.getHeight());
	//The first 2 args define the (x,y) upper left corner, relative to the panel, for where drawing starts, so 0,0 means start from the upper left. setting W and H to the panel

	int red = (int)(Math.random()*255);
	int green = (int)(Math.random()*255);
	int blue = (int)(Math.random()*255);

	Color randomColor = new Color(red,green,blue);
	g.setColor(randomColor);
	g.fillOval(70,70,100,100);
	//70,70 xy and 100w 100h
}


Behind every good Graphics reference is a Graphics2D object.
	The argument to paintComponent() is declared as type Graphics (java.awt.Graphics).
		public void paintComponent(Graphics g) {}
	So the parameter 'g' IS-A graphics object. Which means it could be a subclass of Graphics (b/c polymorphism). and in fact it is

The object reference by the 'g' parameter is actually an instance of the Graphics2D class.
	There are things you can do with a Graphics2D reference that you can't do with a Graphics reference. A Graphics2D object can do more than a Graphics object, and it really is a Graphics2D object lurking behind the Graphics reference.

	Remember your polymorphism. The compiler decides which methods you can call based on the reference type, not the object type. If you have a Dog object reference by an Animal refvar:

	Animal a = new Dog();

	you can NOT say:

	a.bark()

	Even though you know it's really a Dog back there. The compiler looks at 'a', sees that it's of type Animal, and finds that there's no remote control button for bark() in the Animal class. But you can still get the object back to the Dog it really is by saying:

	Dog d = (Dog) a;
	d.bark();

	So the bottom line with the Graphics object is this:
	If you need to use a method from the Graphics2D class, you can't use the paintComponent parameter ('g') straight from the method. But you can cast it with a new Graphics2D variable.

	Graphics2D g2d = (Graphics2D) g;

Methods you can call on a Graphics reference:

	drawImage()
	drawLine()
	drawPolygon
	drawRect()
	drawOval()
	fillRect()
	fillRoundRect()
	setColor()

To cast the Graphics2D object to a Graphics2D reference:
	
	Graphics2D g2d = (Graphics2D) g;

Methods you can call on a Graphics2D reference:
	fill3DRect()
	draw3DRect()
	rotate()
	scale()
	shear()
	transform()
	setRenderingHints()

Lets paint with a gradient!

public void paintComponent(Graphics g) {//g is a Graphics2D obj masked as a Graphics obj

	Graphics2D g2d = (Graphics2D) g;
	//cast g to a Graphics2D obj so we can call something that G2D has

	GradientPaint gradient = new GradientPaint(70,70,Color.blue,150,150,Color.orange);

	g2d.setPaint(gradient);
	g2d.fillOval(70,70,100,100);
}

public void paintComponent(Graphics g) {
	Graphics2D g2d = (Graphics2D)g;

	int red = (int)(Math.random()*255);
	int green = (int)(Math.random()*255);
	int blue = (int)(Math.random()*255);
	Color startColor = new Color (red,green,blue);

	red = (int)(Math.random()*255);
	green = (int)(Math.random()*255);
	blue = (int)(Math.random()*255);
	Color endColor = new Color (red,green,blue);

	GradientPaint gradient = new GradientPaint(70,70,starColor,150,150,endColor);
	g2d.setPaint(gradient);
	g2d.fillOval(70,70,100,100); 
}

/////////////////
//BULLET POINTS//
/////////////////
Events:
- To make a GUI, start with a window, usually a JFrame
	JFrame frame = new JFrame();
- You can add widgets (buttons,text fields, etc.) to the JFrame using:
	frame.getContentPane().add(button);
- Unlike most other components, the JFrame doesn't let you add to it directly, so you must add to the JFrame's content pane.
- To make the window (JFrame) display, you must give it a size and tell it to be visible:
	frame.setSize(300,300); //args width,height
	frame.setVisible(true);
- To know when a user clicks a button (or takes some other action on the user interface) you need to listen for a GUI event.
- To listen for an event, you must register your interest with an event source. An event source is the thing (button, checkbox, etc.) that 'fires' an event based on user interaction.
- The Listener interface gives the event source a way to call you back, because the interface defines the method(s) the event source will call when an event happens.
- To register for events with a source, call the source's registration method. Registration methods always take the form of: add<EventType>Listener. To register for a button's ActionEvents, for example, call:
	button.addActionListener(this);
- Implement the listener's interface by implementing all of the interface's event-handling methods. Put your event handling code in the listener call-back method. For ActionEvents, the method is:
	public void actionPerformed(ActionEvent event) {
		button.setText("you clicked!");
	}
- The event object passed into the event-handler method carries information about the event, including the source of the event.

Graphics
- You can draw 2D graphics directly on to a widget.
- You can draw a .gif or .jpeg on to a widget.
- To draw your own graphics(including a .gif or .jpeg), make a subclass of JPanel and override the paintComponent() method.
- The paintComponent() method is called by the GUI system. YOU NEVER CALL IT YOURSELF. The argument to paintComponent() is a Graphics object that gives you a surface to draw on, which will end up on the screen. You cannot construct that object yourself.
- Typical methods to call on a Graphics object (the paintComponent parameter) are:
	graphics.setColor(Color.blue);
	g.fillRect(20,50,100,120);
- To draw a .jpg, construct an Image using:
	Image image = new ImageIcon("catzilla.jpg").getImage();
	and draw the image using
	g.drawImage(image,3,4,this);
- The object reference by the Graphics parameter to paintComponent() is actually an instance of the Graphics2D class. The Graphics 2D class has a variety of methods including: fill3DRect(), draw3dRect(), rotate(), scale(), shear(), transform()
- To invoke the Graphics2D methods, you must cast the parameter from a Graphics object to a Graphics2D object:
	Graphics2D g2d = (Graphics2D) g;

We can get an event.
We can paint graphics.
But can we paint graphics when we get an event?
	Let's hook up an event to a change in our drawing panel. We'll make the circle change colors each time you click the button. Here's how the program flows:
	Start the app:
	1. The frame is built with the two widgets (drawing panel and a button). A listener is created and registered with the button. Then the frame is displayed nad it just waits for the user to click.
	2. The user clicks the button and the button creates an event object and calls the listener's event handler.
	3. The event handler calls repaint() on the frame. The system calls paintComponent() on the drawing panel.
	4. Voila! A new color is painted because the paintComponent() runs again, filling the circle with a random color.

GUI layouts: putting more than one widget on a frame
	We cover GUI layouts in the next chapter, but we'll do a quick rundown here to get you going. By default, a frame has five regions you can add to. You can add only one thing to each region of the frame, but don't panic! That one thing might be a panel that holds three other things including a panel that holds two more things and... you get the idea. In fact, we were 'cheating' when we added a button to the frame using:

		frame.getContentPane().add(button);
		//this isn't really the way you're supposed to do it(the one-arg add method).

		frame.getContentPane().add(BorderLayout.CENTER,button);
		//we call the two-arg add method, that takes a region(using a constant) and the widget to add to that region.
		This is the better(and usually mandatory) way to add to a frame's default content pane. Always specify WHERE(which region) you want the widget to go.
		When you call the single-arg add method(the one we shouldn't use) the widget will automatically land in the center region.

Let's try it with TWO buttons
	The south button will act as it does now, simply calling repaint on the frame. The second button(which we'll stick in the east region) will change the text on a label.(A label is just text on the screen.)

So now we need FOUR widgets
	west: label will go here
	center: drawing panel goes in the center
	east: label-changing button will be here
	south: color-changing button will go here

And we need to get TWO events
	How do you get two events when you have only one actionPerformed() method

Option 1:
Implement two actionPerformed() methods.

class MyGui implements ActionListener {
	//blah blah

	public void actionPerformed(ActionEvent event) {
		frame.repaint();
	}

	public void actionPerformed(ActionEvent event) {
		label.setText("That hurt!");
	}
}

	Flaw: You can't! You can't implement the same method twice in a Java class. It won't compile. And even if you could, how could the event source know which of the two methods to call?

Option 2:
Register the same listener with BOTH buttons.

class MyGui implements ActionListener {
	//blahblah

	public void go() {
		//build gui
		colorButton = new JButton();
		labelButton = new JButton();
		colorButton.addActionListener(this);
		labelButton.addActionListener(this);
		//more gui code here
	}

	public void actionPerformed(ActionEvent event) {
		if (event.getSource() == colorButton) {
			frame.repaint();
		}  else{
			label.setText("That hurt");
		}
	}
}

	Flaw: this does work, but in most cases it's not very OO. One event handler doing many different things means that you have a single method doing many different things.If you need to change how one source is handled, you have to mess with everybody's event handler. Sometimes it is a good solution, but usually it hurts maintainability and extensibility.

Option 3:
Create two separate ActionListener classes

class MyGui {
	JFrame frame;
	JLabel label;
	void gui() {
		//code to instantiate the two listeners and register one
		//with the color button and the other with the label button
	}
}

class ColorButtonListener implements ActionListener {
	public void actionPerformed(ActionEvent event) {
		frame.repaint();
		//Won't work! This class doesn't have a reference to the 'frame' variable of the MyGui class
	}
}

class LabelButtonListener implements ActionListener {
	public void actionPerformed(ActionEvent event) {
		label.setText("That hurt!");
		//Taihen! This class has no reference to the variable 'label'
	}
}

	Flaw: these classes won't have access to the variables they need to act on,'frame' and 'label'. You could fix it, but you'd have to give each of the listener classes a reference to the main GUI class, so that inside the actionPerformed() methods the listener could use the GUI class reference to access the variables of the GUI class. But that's breaking encapsulation, so we'd probably need to make getter methods for the gui widgets(getFrame(), getLabe(), etc.). And you'd probably need to add a constructor to the listener class so that you cna pass the GUI reference to the listener at the time the listener is instantiated. 
	There has got to be a better way!

Inner class to the rescue!
You can have one class nested inside another. It's easy. Just make sure that the definition for the inner class is inside the curly braces of the outer class.

	Simple inner class:
	class MyOuterClass {
		class MyInnerClass {
			void go() {

			}
		}
	}
An inner class can use all of the methods and variables of the outer class, even the private ones.

The inner class gets to use those variables and methods just as if the methods and variables were declared within the inner class.

An inner class gets a special pass to use the outer class's stuff. Even the private stuff.And the inner class can use those private variables and methods of the outer class as if the variables and members were defined in the inner class. That's what's so handy about inner classes- they have most of the benefits of a normal class, but with special access rights.

Inner class using an outer class variable
	class MyOuterClass {
		private int x;

		class MyInnerClass {
			void go() {
				x = 42;
				//use 'x' as if it were a variable of the inner class!
			}
		}//close inner
	}//close outer

An inner class instance must be tied to an outer class instance*
(*There's an exception to this, for a very special case- an inner class defined within a static method. But we're not going htere, and you might go your entire Java life without ever encountering one of these.)

	Remember, when we talk about an inner class accessing something in the outer class, we're really talking about an instance of the inner class accessing something in an instance of the outer class. But which instance?

	Can any arbitrary instance of the inner class access the methods and variables of any instance of the outer class? NO!

An inner object must be tied to a specific outer object on the heap.
1. Make an instance of the outer class
2. Make an instance of the inner class, by using the instance of the outer class.
3. The outer and inner objects are now intimately linked.
//These two objects on the heap have a special bond. The inner can use the outer's variables and vice-versa

How to make an instance of an inner class
	If you instantiate an inner class from code within an outer class, the instance of the outer class is the one that the inner object will 'bond' with. For example, if code within a method instantiates the inner class, the inner object will bond to the instance whose method is running.

	Code in an outer class can instantiate one of its own inner classes, in exactly the same way it instantiates any other class... new MyInner()

	class MyOuter {

		private int x;
		//the outer class has a private instance variable x

		MyInner inner = new MyInner();
		//Make an instance of the inner class

		public void doStuff() {
			inner.go();
		}

		class MyInner {
			void go() {
				x = 42;
			//The method in the inner class uses the outer class instvar x as if x belonged to the inner class.
			}
		}//close inner
	}//close outer

Side bar
You can instantiate an inner instance from code running outside the outer class, but you have to us a special syntax. Chances are you'll go through your entire Java life and never need to make an inner class from outside, but just in case you're interested.

	class Foo {
		public static void main (String[] args) {
			MyOuter outerObj = new MyOuter();
			MyOuter.MyInner innerObj = outerObj.new MyInner();
		}
	}

What makes inner classes important?
	Inner objects allow you to implement the same interface more than once in a class. Remember, you can't implement a method more than once in a normal Java class. But using inner classes, each inner class can implement the same interface, so you can have all these different implementations of the very same interface methods.

Why would you ever want to implement the same method twice?
	Revisiting GUI event handlers. Think about it. if you want three buttons to each have a different event behavior, then use three inner classes, all implementing ActionListener- which means each class gets to implement its own actionPerformed method.

Are event handlers the only reason to use inner classes?
	No, Event handlers are just an obvious example. Anytime you need a separate class, but still want that class to behave as if it were part of another class, an inner class is the best- and sometimes only- way to do it.

If you want the inner class to behave like it belongs to the outer class, why have a separate class in the first place? Why wouldn't the inner class code just be in the outer class in the first place?
	I just gave you one scenario, where you need more than one implementation of an interface. But even when you're not using interfaces, you might need two different classes because those classes represent two different things. It's good OO.

You can always implement more than one interface, but you can extend only one class. You can only be one kind of IS-A when it comes to class types.

You can't be both a Dog and a Button. But if you're a Dog that needs to sometimes be a Button ( in order to pass yourself to methods that take a Button), the Dog class (which extends Animal so it can't extend Button) can have an inner class that acts on the Dog's behalf as a Button, by extending Button, and thus wherever a Button is required the Dog can pass his inner Button instead of himself. In other words, instead of saying x.takeButton(this), the Dog object calls x.takeButton(new MyInnerButton()).

Remember the drawing panel we used, where we made our own subclass of JPanel? Right now, that class is a separate, non-inner, class. And that's fine, because the class doesn't need special access to the instance variables of the main GUI. But what if it did? What if we're doing an animation on the panel, and it's getting its coordinates from the main application (say, based on something the user does elsewhere in the GUI). In that case, if we make the drawing panel an inner class, the drawing panel class gets to be a subclass of JPanel, while the outer class is still free to be a subclass of something else

The drawing panel isn't reusable enough to be a separate class anyway, since what it's actually painting is specific to this one GUI application.

The inner object can't be tied to any other outer object.
An outer object can have as many inner objects as it wants.

Using an inner class for animation
We're going to look at how useful an inner class is when used as a subclass of something the outer class doesn't extend. In other words, when the outer class and inner class are in different inheritance trees.
Our goal is to make a simple animation, where the circle moves across the screen from the upper left down to the lower right.

How simple animation works:
1. Paint an object at a particular x and y coordinate
	g.fillOval(20,50,100,100);//20 from left, 50 from top

2. Repaint the object at a different x and y coordinate
	g.fillOval(25,55,100,100);//25 from left, 55 from top

3. Repeat the previous step with changing x and y values for as long as the animation is supposed to continue.

What we really want is something like...
	class MyDrawPanel extends JPanel {
		public void paintComponent(Graphics g) {
			g.setColor(Color.orange);
			g.fillOval(x,y,100,100);
		}
	}

But where do we get the new x and y coordinates?
And who calls repaint()?
	See if you can design a simple solution to get the ball to animate from the top left of the drawing panel down to the bottom right. Our answer is on the next page, so don't turn this page until you're done.

Uh oh. It didn't move... it smeared.
We forgot to erase what was already there! So we got trails
	To fix it, all we have to do is fill in the entire panel with the background color, before painting the circle each time. The code below adds two lines at the start of the method: one to set the color to white(the background color of the drawing panel) and the other to fill the entire panel rectangle with that color.

